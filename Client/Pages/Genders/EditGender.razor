@page "/gender/edit/{GenderID:int}"
@inject IGenderAPI genderAPI
@inject NavigationManager navigationManager

<h3>Edit Gender</h3>

<EditForm Model="Gender" OnValidSubmit="Edit">
    <FluentValidationValidator></FluentValidationValidator>
    <div class="form-group">
        <label>Name</label>
        <InputText @bind-Value="Gender.Name"></InputText>
        <ValidationMessage For="@(() => Gender.Name)" />
    </div>

    <button type="submit" class="btn btn-success">
        <img src="https://www.mansarovar.com.co/app/PQRS/LibraryCSS/giphy.gif" style="width:20px; height:20px" class="@(Loading ? "" : "d-none")" />
        Save
    </button>
</EditForm>

@if (showError)
{
    <p style="color: red">Something went wrong... try again!</p>
}

@code {
    private GenderDto Gender = new();

    [Parameter]
    public int GenderID { get; set; }

    public bool Loading = false;

    private bool showError = false;

    protected override async Task OnInitializedAsync()
    {
        Gender = await genderAPI.GetByID(GenderID);
    }

    private async Task Edit()
    {
        showError = false;

        Loading = true;

        var result = await genderAPI.EditGender(Gender);

        if (result is null)
        {
            navigationManager.NavigateTo("genders");
        }
        else
        {
            showError = true;
            Console.WriteLine(result);
        }

        Loading = false;
    }
}
